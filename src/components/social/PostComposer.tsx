
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { ChevronDown, ChevronUp, Zap, Edit3, Share } from 'lucide-react';
import { useAuth } from '@/components/AuthProvider';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import { PrivacySelector, PrivacyLevel } from './PrivacySelector';
import { useUserFollows } from '@/hooks/useUserFollows';
import { PostSuggestion } from '@/services/AutoPostService';

interface PostComposerProps {
  suggestion?: PostSuggestion;
  onSuccess?: () => void;
  className?: string;
}

export function PostComposer({ suggestion, onSuccess, className }: PostComposerProps) {
  const { user, profile } = useAuth();
  const { followingCount } = useUserFollows();
  const [isExpanded, setIsExpanded] = useState(false);
  const [content, setContent] = useState('');
  const [privacyLevel, setPrivacyLevel] = useState<PrivacyLevel>('private');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Initialize content and privacy from suggestion
  useEffect(() => {
    if (suggestion) {
      setContent(suggestion.content);
      setPrivacyLevel(suggestion.privacyLevel);
    }
  }, [suggestion]);

  // Auto-adjust privacy based on follow count
  useEffect(() => {
    if (followingCount < 3) {
      setPrivacyLevel('private');
    }
  }, [followingCount]);

  const handleQuickShare = async () => {
    if (!user || !content.trim()) {
      toast.error('Please enter some content for your post');
      return;
    }

    setIsSubmitting(true);
    
    try {
      const { error } = await supabase
        .from('posts')
        .insert({
          user_id: user.id,
          content: content.trim(),
          privacy_level: privacyLevel,
          template_id: suggestion?.template?.id || null,
          is_auto_generated: !!suggestion,
        });

      if (error) throw error;

      toast.success('Post shared successfully!');
      setContent('');
      setIsExpanded(false);
      onSuccess?.();
      
    } catch (error) {
      console.error('Error creating post:', error);
      toast.error('Failed to share post. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleExpandEdit = () => {
    setIsExpanded(true);
  };

  const handleCollapseEdit = () => {
    setIsExpanded(false);
  };

  if (!user) {
    return null;
  }

  const hasContent = content.trim().length > 0;
  const isAutoGenerated = !!suggestion;

  return (
    <Card className={className}>
      <CardContent className="p-4">
        {/* Compact Mode */}
        {!isExpanded && hasContent && (
          <div className="space-y-4">
            <div className="flex items-start space-x-3">
              <Avatar className="h-8 w-8">
                <AvatarImage src={profile?.avatar_url || undefined} />
                <AvatarFallback className="text-xs">
                  {profile?.full_name?.charAt(0) || profile?.username?.charAt(0) || 'U'}
                </AvatarFallback>
              </Avatar>
              
              <div className="flex-1 min-w-0">
                {isAutoGenerated && (
                  <div className="flex items-center gap-2 mb-2">
                    <Zap className="h-3 w-3 text-blue-500" />
                    <span className="text-xs text-blue-600 font-medium">AI Generated</span>
                  </div>
                )}
                
                <div className="bg-muted/50 rounded-lg p-3 mb-3">
                  <p className="text-sm line-clamp-3">{content}</p>
                </div>
                
                <PrivacySelector 
                  value={privacyLevel} 
                  onValueChange={setPrivacyLevel}
                  followingCount={followingCount}
                />
              </div>
            </div>

            <div className="flex items-center justify-between">
              <Button
                variant="ghost"
                size="sm"
                onClick={handleExpandEdit}
                className="text-muted-foreground hover:text-foreground"
              >
                <Edit3 className="h-4 w-4 mr-1" />
                Edit
                <ChevronDown className="h-3 w-3 ml-1" />
              </Button>

              <Button
                onClick={handleQuickShare}
                disabled={!hasContent || isSubmitting}
                className="px-6"
              >
                <Share className="h-4 w-4 mr-1" />
                {isSubmitting ? 'Sharing...' : 'Share Now'}
              </Button>
            </div>
          </div>
        )}

        {/* Expanded Edit Mode */}
        {(isExpanded || !hasContent) && (
          <div className="space-y-4">
            <div className="flex items-start space-x-3">
              <Avatar className="h-10 w-10">
                <AvatarImage src={profile?.avatar_url || undefined} />
                <AvatarFallback>
                  {profile?.full_name?.charAt(0) || profile?.username?.charAt(0) || 'U'}
                </AvatarFallback>
              </Avatar>
              
              <div className="flex-1 space-y-3">
                {isAutoGenerated && (
                  <div className="flex items-center gap-2">
                    <Zap className="h-4 w-4 text-blue-500" />
                    <span className="text-sm text-blue-600 font-medium">AI Generated Content</span>
                    <span className="text-xs text-muted-foreground">(editable)</span>
                  </div>
                )}
                
                <Textarea
                  placeholder="What's happening in your tennis world?"
                  value={content}
                  onChange={(e) => setContent(e.target.value)}
                  className="min-h-[100px] resize-none"
                  maxLength={500}
                />
                
                <PrivacySelector 
                  value={privacyLevel} 
                  onValueChange={setPrivacyLevel}
                  followingCount={followingCount}
                />
              </div>
            </div>

            {/* Character Counter */}
            <div className="flex justify-between items-center text-sm text-muted-foreground">
              <span>{content.length}/500 characters</span>
            </div>

            {/* Actions */}
            <div className="flex items-center justify-between pt-3 border-t">
              {hasContent && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleCollapseEdit}
                  className="text-muted-foreground hover:text-foreground"
                >
                  <ChevronUp className="h-3 w-3 mr-1" />
                  Collapse
                </Button>
              )}
              
              <div className="flex gap-2 ml-auto">
                <Button
                  onClick={handleQuickShare}
                  disabled={!hasContent || isSubmitting}
                  className="px-6"
                >
                  <Share className="h-4 w-4 mr-1" />
                  {isSubmitting ? 'Sharing...' : 'Share Now'}
                </Button>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
